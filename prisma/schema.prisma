generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL") 
  directUrl  = env("DIRECT_URL")     

}

/**
 * ===========================
 * EXISTENTE
 * ===========================
 */
model Lead {
  id          Int      @id @default(autoincrement())
  name        String
  email       String
  phone       String?
  destination String?
  notes       String?
  createdAt   DateTime @default(now())

  @@index([email]) // üîπ ajuda nas consultas por email
}

/**
 * ===========================
 * AUTH / RBAC
 * ===========================
 */
model User {
  id           Int           @id @default(autoincrement())
  name         String
  email        String        @unique
  phone        String?
  isActive     Boolean       @default(true)
  passwordHash String?       // ‚Üê senha hash
  roles        UserRole[]
  sessions     AuthSession[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  @@index([isActive])
}

model Role {
  id          Int              @id @default(autoincrement())
  name        String           @unique // 'comum' | 'admin' | 'superadmin'
  description String?
  users       UserRole[]
  permissions RolePermission[]
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
}

model Permission {
  id          Int              @id @default(autoincrement())
  key         String           @unique // ex: "users.read"
  description String?
  roles       RolePermission[]
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
}

model UserRole {
  userId Int
  roleId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  role   Role @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@id([userId, roleId])
  @@index([roleId])
}

model RolePermission {
  roleId       Int
  permissionId Int
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@id([roleId, permissionId])
  @@index([permissionId])
}

/**
 * Sess√µes de login (cookie httpOnly com ID desta sess√£o).
 * `id` atua como token opaco. `expiresAt` para expira√ß√£o.
 */
model AuthSession {
  id        String   @id @default(cuid()) // token opaco
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  expiresAt DateTime

  @@index([userId])
  @@index([expiresAt]) // üîπ facilita job que limpa sess√µes expiradas
}

model Package {
  id          Int            @id @default(autoincrement())
  title       String
  slug        String         @unique
  description String?
  price       Decimal?       @db.Decimal(12, 2) // üí∞ currency com 2 casas
  startDate   DateTime?
  endDate     DateTime?
  days        Int?
  location    String?
  isActive    Boolean        @default(true)
  createdAt   DateTime       @default(now())
  images      PackageImage[]

  @@index([isActive])
  @@index([startDate, endDate])
}

model PackageImage {
  id        Int     @id @default(autoincrement())
  url       String
  order     Int     @default(0)
  package   Package @relation(fields: [packageId], references: [id], onDelete: Cascade)
  packageId Int

  @@index([packageId])
  @@index([order])
}

model EditableContent {
  id        Int      @id @default(autoincrement())
  path      String
  key       String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([path, key])
  @@index([path])
}
